using System;
using UnityEngine;
using UnityMVC.Component;
using UnityMVC.Events;
using UnityMVC.View;

namespace NewNamespace
{
    // Autogenerated code. DO NOT CHANGE unless it is really needed and you know what you are doing.
    public partial class NewMVCComponent : MVCComponent
    {
        private NewModuleView View => BaseOwnerView as NewModuleView;
        public /*NEW*/ NewModuleControllerEvents Events => View.Events;
        public override Type GetViewType()
        {
            return typeof(NewModuleView);
        }
        
        public override bool IsActive()
        {
            bool viewExists = View != null;
            bool isActive = View.gameObject.activeSelf;
            if (viewExists)
            {
                Debug.LogWarning($"View {typeof(NewModuleView).Name} does not exist");
            }
            if (!isActive)
            {
                Debug.LogWarning($"View {this.GetType().Name} not active");
            }
            return isActive && viewExists;
        }
        
        internal override void SetView(View view)
        {
            BaseOwnerView = view as NewModuleView;
            OnViewWasSet(BaseOwnerView);
        }

        protected override void InternalAwake()
        {
        }

        protected override void InternalStart()
        {
            
        }
        
        protected override void InternalOnDestroy()
        {
            if (View == null)
            {
                return;
            }
            View.UnregisterComponentFromView(this);
        }

        protected override void InternalOnEnable()
        {
            if (View == null)
            {
                return;
            }
            RegisterEvents();
        }

        protected override void InternalOnDisable()
        {
            if (View == null)
            {
                return;
            }
            UnregisterEvents();
        }
    }
}