using System;
using UnityMVC.Component;
using UnityMVC.Events;
using UnityMVC.Model;
using UnityMVC.View;

//// Autogenerated code. DO NOT CHANGE unless it is really needed and you know what you are doing.
public partial class MVCComponentTemplate : MVCComponent
{
    private new ViewTemplate View => BaseOwnerView as ViewTemplate;
    // Access Events from here. Please, use Observer pattern, people who uses Observer patterns are nice people.
    public new ControllerTemplateEvents Events => View.Events;
    public new MVCComponentTemplateModel Data => _data;
    private readonly MVCComponentTemplateModel _data = new MVCComponentTemplateModel();
    
    public override Type GetViewType()
    {
        return typeof(ViewTemplate);
    }
    public override void SetView(View view)
    {
        BaseOwnerView = view as ViewTemplate;
        OnViewWasSet(BaseOwnerView);
    }

    protected override void InternalStart()
    {
        RegisterEvents();
    }
    
    protected override void InternalOnDestroy()
    {
        if (View != null)
        {
            View.UnregisterComponentFromView(this);
        }
        UnregisterEvents();
    }
}